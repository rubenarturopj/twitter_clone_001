// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// tables ****************

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  followingIds    String[] @db.ObjectId
  hasNotification Boolean?

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
}

// @id @default(auto()) @map("_id") @db.ObjectId
// this creates a single unique user ID

model Post {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  likedIds           String[] @db.ObjectId
  image              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments          Comment[]
}

// We are connecting the table USER with the POST table through the "user" parameter.
// USER Table's "id" will pass as the "userId" value in the POST table

model Comment {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  userId             String @db.ObjectId
  postId             String @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

// We are connecting the USER table and the POST table with the COMMENT table.
// USER table's "id" will pass as the value for the parameter "userId" in the COMMENT table.
// POST table's "id" will pass as the "postId" value for the parameter "post" in the COMMENT table.

model Notification {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  body               String
  userId             String @db.ObjectId
  createdAt          DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// We are connecting the USER table with the NOTIFICATION table.
// USER table's "id" will pass as the "userId" value for the parameter "user" in the NOTIFICATION table.